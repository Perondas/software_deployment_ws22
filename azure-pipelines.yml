# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'

- script: |
    cd Lab2
    npm install
    npm test
  displayName: 'npm install and test'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'Lab2'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true

- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure f√ºr Bildungseinrichtungen(8cbc67bc-4d42-4f68-8be3-6a039edf574a)'
    appType: 'webApp'
    WebAppName: 'per081022app'
    packageForLinux: '$(System.DefaultWorkingDirectory)/*.zip'
    WebConfigParameters: |
      <?xml version="1.0" encoding="utf-8"?>
      <!--
           This configuration file is required if iisnode is used to run node processes behind
           IIS or IIS Express.  For more information, visit:
      
           https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config
      -->
      
      <configuration>
        <system.webServer>
          <!-- Visit http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx for more information on WebSocket support -->
          <webSocket enabled="false" />
          <handlers>
            <!-- Indicates that the server.js file is a node.js site to be handled by the iisnode module -->
            <add name="iisnode" path="index.js" verb="*" modules="iisnode"/>
          </handlers>
          <rewrite>
            <rules>
              <!-- Do not interfere with requests for node-inspector debugging -->
              <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                <match url="^app.js\/debug[\/]?" />
              </rule>
      
              <!-- First we consider whether the incoming URL matches a physical file in the /public folder -->
              <rule name="StaticContent">
                <action type="Rewrite" url="public{REQUEST_URI}"/>
              </rule>
      
              <!-- All other URLs are mapped to the node.js site entry point -->
              <rule name="DynamicContent">
                <conditions>
                  <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                </conditions>
                <action type="Rewrite" url="app.js"/>
              </rule>
            </rules>
          </rewrite>
      
          <!-- 'bin' directory has no special meaning in node.js and apps can be placed in it -->
          <security>
            <requestFiltering>
              <hiddenSegments>
                <remove segment="bin"/>
              </hiddenSegments>
            </requestFiltering>
          </security>
      
          <!-- Make sure error responses are left untouched -->
          <httpErrors existingResponse="PassThrough" />
      
          <!--
            You can control how Node is hosted within IIS using the following options:
              * watchedFiles: semi-colon separated list of files that will be watched for changes to restart the server
              * node_env: will be propagated to node as NODE_ENV environment variable
              * debuggingEnabled - controls whether the built-in debugger is enabled
      
            See https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config for a full list of options
          -->
          <iisnode watchedFiles="web.config;*.js"/>
        </system.webServer>
      </configuration>